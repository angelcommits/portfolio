name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  RAILS_ENV: test
  NODE_ENV: test
  RUBY_VERSION: 3.3.0
  NODE_VERSION: 20

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: portfolio_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: portfolio-backend
      
      - name: Setup test database
        working-directory: portfolio-backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/portfolio_test
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
      
      - name: Run RSpec tests
        working-directory: portfolio-backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/portfolio_test
          REDIS_URL: redis://localhost:6379
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          bundle exec rspec --format documentation --format RspecJunitFormatter --out rspec.xml
      
      - name: Generate coverage report
        working-directory: portfolio-backend
        if: always()
        run: |
          bundle exec rails coverage:report || true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./portfolio-backend/coverage/coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: portfolio-backend/rspec.xml

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: portfolio-frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: portfolio-frontend
        run: npm ci
      
      - name: Run linting
        working-directory: portfolio-frontend
        run: npm run lint || true
      
      - name: Run Jest tests
        working-directory: portfolio-frontend
        run: npm test -- --coverage --watchAll=false || true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./portfolio-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: portfolio-backend
      
      - name: Run Brakeman
        working-directory: portfolio-backend
        run: |
          bundle exec brakeman --no-pager --format json --output brakeman.json || true
          bundle exec brakeman --no-pager || true
      
      - name: Run npm audit
        working-directory: portfolio-frontend
        run: npm audit --audit-level=moderate || true
      
      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            portfolio-backend/brakeman.json
            portfolio-frontend/npm-audit.log

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: portfolio-backend
      
      - name: Run RuboCop
        working-directory: portfolio-backend
        run: bundle exec rubocop --parallel || true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: portfolio-frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: portfolio-frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: portfolio-frontend
        run: npm run lint || true

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: portfolio-backend
      
      - name: Build Rails app
        working-directory: portfolio-backend
        env:
          RAILS_ENV: production
          SECRET_KEY_BASE: dummy_secret_for_assets_precompile
        run: |
          bundle exec rails assets:precompile || true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: portfolio-frontend/package-lock.json
      
      - name: Build Next.js app
        working-directory: portfolio-frontend
        run: |
          npm ci
          npm run build || true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            portfolio-backend/public/assets
            portfolio-frontend/.next